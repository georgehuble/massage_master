# API_TOKEN = "7809733540:AAFCaap7XQh9KwfjYFNp56VxWHdpqd89VdM"

from aiogram import Bot, Dispatcher, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import CommandStart
from fastapi import FastAPI
import uvicorn
import asyncio
from datetime import datetime, timedelta

from calendar_utils import get_calendar_service, create_event, get_busy_slots_for_day
from aiogram.types import WebAppInfo


API_TOKEN = "7809733540:AAFCaap7XQh9KwfjYFNp56VxWHdpqd89VdM"
CALENDAR_ID = "86c85f30ee76c7ff0761de505f603030d88602df24f0cd91dc751859117b0aab@group.calendar.google.com"

bot = Bot(token=API_TOKEN)
dp = Dispatcher()
app = FastAPI()

# –•—Ä–∞–Ω–∏–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
USER_STATE = {}


@dp.message(CommandStart())
async def send_welcome(message: types.Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ WebApp",
            web_app=WebAppInfo(url="https://5c56-62-60-239-222.ngrok-free.app/")  # —Ç–≤–æ–π —Ñ—Ä–æ–Ω—Ç
        )]
    ])
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ó–∞–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –º–∞—Å—Å–∞–∂ —á–µ—Ä–µ–∑ —É–¥–æ–±–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å:", reply_markup=keyboard)


@dp.message(F.web_app_data)
async def handle_webapp_data(message: types.Message):
    selected_time = datetime.fromisoformat(message.web_app_data.data)
    now = datetime.utcnow() + timedelta(hours=3)  # —É—á—ë—Ç –º–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª
    if selected_time < now + timedelta(hours=4):
        await message.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 4 —á–∞—Å–∞.")
        return

    if selected_time > now + timedelta(days=14):
        await message.answer("–ù–µ–ª—å–∑—è –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –±–æ–ª–µ–µ —á–µ–º –Ω–∞ 2 –Ω–µ–¥–µ–ª–∏ –≤–ø–µ—Ä—ë–¥.")
        return

    service = get_calendar_service()
    busy = get_busy_slots_for_day(service, selected_time.date())
    if selected_time in busy:
        await message.answer("–≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ.")
        return

    link = create_event(selected_time, message.from_user.full_name)
    await message.answer(f"‚úÖ –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ {selected_time.strftime('%d.%m %H:%M')}!\n\nüìÖ {link}")


async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
