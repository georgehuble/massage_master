from aiogram import Bot, Dispatcher, types, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, WebAppInfo
from aiogram.filters import CommandStart
import os
from fastapi import FastAPI
import asyncio
import json
from datetime import datetime, timedelta

from calendar_utils import get_calendar_service, create_event, get_busy_slots_for_day

API_TOKEN = os.getenv("BOT_TOKEN")
CALENDAR_ID = os.getenv("CALENDAR_ID")

bot = Bot(token=API_TOKEN)
dp = Dispatcher()
app = FastAPI()

# –•—Ä–∞–Ω–∏–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
USER_STATE = {}


@dp.message(CommandStart())
async def send_welcome(message: types.Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(
                text="üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ WebApp",
                web_app=WebAppInfo(url="https://app.selesta-test.ru?tgWebAppDebug=1")
            )]
        ],
        resize_keyboard=True
    )
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ó–∞–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –º–∞—Å—Å–∞–∂ —á–µ—Ä–µ–∑ —É–¥–æ–±–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å:", reply_markup=keyboard)


@dp.message(F.web_app_data)
async def handle_webapp_data(message: types.Message):
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ WebApp
        data = json.loads(message.web_app_data.data)
        selected_time = datetime.fromisoformat(data['slot'])
        # –í—Å–µ–≥–¥–∞ –±–µ—Ä—ë–º –Ω–∞—Å—Ç–æ—è—â–µ–µ –∏–º—è –∏–∑ Telegram
        user_name = message.from_user.full_name
    except (json.JSONDecodeError, KeyError):
        # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç ‚Äî —Ç–æ–ª—å–∫–æ ISO-—Å—Ç—Ä–æ–∫–∞ –±–µ–∑ JSON
        try:
            selected_time = datetime.fromisoformat(message.web_app_data.data)
            user_name = message.from_user.full_name
        except ValueError:
            await message.answer("–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            return

    # –ó–¥–µ—Å—å –≤–∞—à–∞ –ª–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏:
    # –Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É: save_booking(user_name, selected_time, ...)
    # –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É

    await message.answer(f"–°–ø–∞—Å–∏–±–æ, {user_name}! –í–∞—à–∞ –∑–∞–ø–∏—Å—å –Ω–∞ {selected_time.strftime('%d.%m.%Y %H:%M')} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.")


async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
