from aiogram import Bot, Dispatcher, types, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, WebAppInfo
from aiogram.filters import CommandStart
import os
from fastapi import FastAPI
import asyncio
import json
from datetime import datetime, timedelta

from calendar_utils import get_calendar_service, create_event, get_busy_slots_for_day

API_TOKEN = os.getenv("BOT_TOKEN")
CALENDAR_ID = os.getenv("CALENDAR_ID")
ADMIN_ID = os.getenv("ADMIN_CHAT_ID")  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

bot = Bot(token=API_TOKEN)
dp = Dispatcher()
app = FastAPI()

# –¢–∏–ø—ã –º–∞—Å—Å–∞–∂–∞
MASSAGE_TYPES = {
    'classic': {'name': '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –º–∞—Å—Å–∞–∂', 'duration': 60, 'price': '2500 ‚ÇΩ'},
    'therapeutic': {'name': '–õ–µ—á–µ–±–Ω—ã–π –º–∞—Å—Å–∞–∂', 'duration': 80, 'price': '3500 ‚ÇΩ'},
    'fullbody': {'name': '–ú–∞—Å—Å–∞–∂ –≤—Å–µ–≥–æ —Ç–µ–ª–∞', 'duration': 90, 'price': '4000 ‚ÇΩ'},
    'express': {'name': '–≠–∫—Å–ø—Ä–µ—Å—Å –º–∞—Å—Å–∞–∂', 'duration': 40, 'price': '1800 ‚ÇΩ'},
}


@dp.message(CommandStart())
async def send_welcome(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    is_admin = str(message.from_user.id) == str(ADMIN_ID)
    
    if is_admin:
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(
                    text="üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ WebApp",
                    web_app=WebAppInfo(url="https://app.selesta-test.ru?tgWebAppDebug=1")
                )],
                [KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton(text="üìã –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –∑–∞–ø–∏—Å–∏")],
                [KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"), KeyboardButton(text="üìû –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")]
            ],
            resize_keyboard=True
        )
        await message.answer(f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, **–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä**!\n\n–í—ã –º–æ–∂–µ—Ç–µ:\n‚Ä¢ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ WebApp\n‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n‚Ä¢ –£–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–ø–∏—Å—è–º–∏", reply_markup=keyboard, parse_mode='Markdown')
    else:
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(
                    text="üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ WebApp",
                    web_app=WebAppInfo(url="https://app.selesta-test.ru?tgWebAppDebug=1")
                )]
            ],
            resize_keyboard=True
        )
        await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ó–∞–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –º–∞—Å—Å–∞–∂ —á–µ—Ä–µ–∑ —É–¥–æ–±–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å, –Ω–∞–∂–∞–≤ –Ω–∞ —Å–∏–Ω—é—é –∫–Ω–æ–ø–∫—É **\"–ó–∞–ø–∏—Å–∞—Ç—å—Å—è\"**", reply_markup=keyboard, parse_mode='Markdown')


@dp.message(F.web_app_data)
async def handle_webapp_data(message: types.Message):
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ WebApp
        data = json.loads(message.web_app_data.data)
        selected_time = datetime.fromisoformat(data['slot'])
        user_name = data.get('name', message.from_user.full_name)
        massage_type_id = data.get('massageType', 'classic')
        massage_name = data.get('massageName', '–ú–∞—Å—Å–∞–∂')
        price = data.get('price', '2500 ‚ÇΩ')
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–ø–µ –º–∞—Å—Å–∞–∂–∞
        massage_info = MASSAGE_TYPES.get(massage_type_id, MASSAGE_TYPES['classic'])
        duration = massage_info['duration']
        
    except (json.JSONDecodeError, KeyError) as e:
        # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç ‚Äî —Ç–æ–ª—å–∫–æ ISO-—Å—Ç—Ä–æ–∫–∞ –±–µ–∑ JSON
        try:
            selected_time = datetime.fromisoformat(message.web_app_data.data)
            user_name = message.from_user.full_name
            massage_type_id = 'classic'
            massage_name = '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –º–∞—Å—Å–∞–∂'
            price = '2500 ‚ÇΩ'
            duration = 60
        except ValueError:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            return

    try:
        # –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ Google Calendar
        end_time = selected_time + timedelta(minutes=duration)
        
        event_description = f"""
üìã –î–µ—Ç–∞–ª–∏ –∑–∞–ø–∏—Å–∏:
üë§ –ö–ª–∏–µ–Ω—Ç: {user_name}
üíÜ‚Äç‚ôÇÔ∏è –¢–∏–ø –º–∞—Å—Å–∞–∂–∞: {massage_name}
‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration} –º–∏–Ω—É—Ç
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {price}
üì± Telegram: @{message.from_user.username or '–Ω–µ—Ç username'}
üÜî ID: {message.from_user.id}
üìû –ù–æ–º–µ—Ä: {message.from_user.phone_number or '–Ω–µ —É–∫–∞–∑–∞–Ω'}
        """.strip()
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
        event = create_event(
            name=user_name,
            start_time=selected_time,
            end_time=end_time,
            massage_type=massage_name,
            description=event_description
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
        confirmation_text = f"""
‚úÖ **–ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!**

üë§ –ò–º—è: {user_name}
üìÖ –î–∞—Ç–∞: {selected_time.strftime('%d.%m.%Y')}
üïê –í—Ä–µ–º—è: {selected_time.strftime('%H:%M')} - {end_time.strftime('%H:%M')}
üíÜ‚Äç‚ôÇÔ∏è –£—Å–ª—É–≥–∞: {massage_name}
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {price}

üìç –ê–¥—Ä–µ—Å –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ.
        """
        
        await message.answer(confirmation_text, parse_mode='Markdown')
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        if ADMIN_ID:
            admin_text = f"""
üîî **–ù–û–í–ê–Ø –ó–ê–ü–ò–°–¨**

üë§ –ö–ª–∏–µ–Ω—Ç: {user_name}
üì± Username: @{message.from_user.username or '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}
üÜî ID: {message.from_user.id}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: {message.from_user.phone_number or '–Ω–µ —É–∫–∞–∑–∞–Ω'}

üìÖ –î–∞—Ç–∞: {selected_time.strftime('%d.%m.%Y')}
üïê –í—Ä–µ–º—è: {selected_time.strftime('%H:%M')} - {end_time.strftime('%H:%M')}
üíÜ‚Äç‚ôÇÔ∏è –£—Å–ª—É–≥–∞: {massage_name}
‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration} –º–∏–Ω—É—Ç
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {price}

üìù –°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ.
            """
            
            try:
                await bot.send_message(ADMIN_ID, admin_text, parse_mode='Markdown')
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å: {user_name} –Ω–∞ {selected_time} ({massage_name})")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –æ–± –æ—à–∏–±–∫–µ
        if ADMIN_ID:
            error_text = f"""
‚ö†Ô∏è **–û–®–ò–ë–ö–ê –ó–ê–ü–ò–°–ò**

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name} (@{message.from_user.username})
üïê –í—Ä–µ–º—è: {selected_time.strftime('%d.%m.%Y %H:%M')}
‚ùå –û—à–∏–±–∫–∞: {str(e)}
            """
            try:
                await bot.send_message(ADMIN_ID, error_text, parse_mode='Markdown')
            except:
                pass


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@dp.message(lambda message: message.text == "üìû –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
async def test_notifications(message: types.Message):
    if str(message.from_user.id) != str(ADMIN_ID):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    test_time = datetime.now() + timedelta(hours=1)
    test_text = f"""
üîî **–¢–ï–°–¢ –£–í–ï–î–û–ú–õ–ï–ù–ò–ô**

–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {datetime.now().strftime('%H:%M:%S')}

‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!
    """
    
    await message.answer(test_text, parse_mode='Markdown')


@dp.message(lambda message: message.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_statistics(message: types.Message):
    if str(message.from_user.id) != str(ADMIN_ID):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    stats_text = """
üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ó–ê–ü–ò–°–ï–ô**

üìÖ –°–µ–≥–æ–¥–Ω—è: 3 –∑–∞–ø–∏—Å–∏
üìà –ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ: 15 –∑–∞–ø–∏—Å–µ–π  
üí∞ –î–æ—Ö–æ–¥ –∑–∞ –º–µ—Å—è—Ü: 45,000 ‚ÇΩ

üîù –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —É—Å–ª—É–≥–∏:
1. –ú–∞—Å—Å–∞–∂ –≤—Å–µ–≥–æ —Ç–µ–ª–∞ - 40%
2. –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –º–∞—Å—Å–∞–∂ - 35%
3. –õ–µ—á–µ–±–Ω—ã–π –º–∞—Å—Å–∞–∂ - 20%
4. –≠–∫—Å–ø—Ä–µ—Å—Å –º–∞—Å—Å–∞–∂ - 5%

üì± –î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –≤ WebApp
    """
    
    await message.answer(stats_text, parse_mode='Markdown')


@dp.message(lambda message: message.text == "üìã –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –∑–∞–ø–∏—Å–∏")
async def show_today_bookings(message: types.Message):
    if str(message.from_user.id) != str(ADMIN_ID):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        service = get_calendar_service()
        today = datetime.now().date()
        busy_slots = get_busy_slots_for_day(service, today)
        
        if not busy_slots:
            await message.answer("üìÖ **–°–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –∑–∞–ø–∏—Å–∏**\n\n–ù–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç.", parse_mode='Markdown')
            return
        
        bookings_text = "üìÖ **–ó–ê–ü–ò–°–ò –ù–ê –°–ï–ì–û–î–ù–Ø**\n\n"
        
        for i, slot_time in enumerate(sorted(busy_slots), 1):
            bookings_text += f"{i}. üïê {slot_time.strftime('%H:%M')} - –ó–∞–ø–∏—Å—å\n"
        
        bookings_text += f"\nüìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(busy_slots)}"
        
        await message.answer(bookings_text, parse_mode='Markdown')
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π: {str(e)}")


@dp.message(lambda message: message.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def show_settings(message: types.Message):
    if str(message.from_user.id) != str(ADMIN_ID):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    settings_text = """
‚öôÔ∏è **–ù–ê–°–¢–†–û–ô–ö–ò –°–ò–°–¢–ï–ú–´**

üîß –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:
‚Ä¢ –†–∞–±–æ—á–∏–µ —á–∞—Å—ã: 9:00 - 21:00
‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–ª–æ—Ç–∞: 20 –º–∏–Ω—É—Ç
‚Ä¢ –ü–µ—Ä–µ—Ä—ã–≤ –º–µ–∂–¥—É —Å–µ–∞–Ω—Å–∞–º–∏: 20 –º–∏–Ω—É—Ç
‚Ä¢ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–ø–∏—Å—å: 4 —á–∞—Å–∞
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥: 14

üì± –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.
    """
    
    await message.answer(settings_text, parse_mode='Markdown')


async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
