from fastapi import FastAPI, Query, HTTPException, Body
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from datetime import datetime
from google_calendar import get_available_slots
from booking import book_slot, cancel_slot, get_all_bookings, get_user_bookings
from fastapi.staticfiles import StaticFiles
from fastapi.responses import FileResponse
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


app = FastAPI()

from fastapi.middleware.cors import CORSMiddleware

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # üîí –ò–ª–∏ —É–∫–∞–∂–∏ —Ç–æ—á–Ω—ã–π –¥–æ–º–µ–Ω, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å: ["http://localhost:5173"]
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

@app.get("/api/slots")
async def slots(
    day: str = Query(..., example="2025-04-10"),
    massageType: str = Query("classic", description="–¢–∏–ø –º–∞—Å—Å–∞–∂–∞"),
    duration: int = Query(60, description="–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –º–∏–Ω—É—Ç–∞—Ö")
):
    logger.info(f"üîç [BACKEND] Slots request: day={day}, massageType={massageType}, duration={duration}")
    try:
        date_obj = datetime.strptime(day, "%Y-%m-%d")
        logger.info(f"üîç [BACKEND] Parsed date: {date_obj}")
    except ValueError:
        logger.error(f"üîç [BACKEND] Invalid date format: {day}")
        raise HTTPException(status_code=400, detail="Invalid date format")
    
    logger.info(f"üîç [BACKEND] Calling get_available_slots...")
    slots = get_available_slots(date_obj, massageType, duration)
    logger.info(f"üîç [BACKEND] Available slots count: {len(slots)}")
    logger.info(f"üîç [BACKEND] Available slots: {slots}")
    return slots

class BookingRequest(BaseModel):
    name: str
    slot: str  # ISO format
    massageType: str = "classic"  # —Ç–∏–ø –º–∞—Å—Å–∞–∂–∞
    duration: int = 60  # –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –º–∏–Ω—É—Ç–∞—Ö
    eventId: str = None  # ID —Å–æ–±—ã—Ç–∏—è –≤ Google Calendar

@app.post("/api/book")
async def book(request: BookingRequest = Body(...)):
    success, event_id = book_slot(request.name, request.slot, request.massageType, request.duration)
    if not success:
        raise HTTPException(status_code=409, detail="–°–ª–æ—Ç —É–∂–µ –∑–∞–Ω—è—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è.")
    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è —á–µ—Ä–µ–∑ Celery
    from tasks import delete_booking_task
    import pytz
    from datetime import datetime
    massage_time = datetime.fromisoformat(request.slot)
    moscow_tz = pytz.timezone("Europe/Moscow")
    if massage_time.tzinfo is None:
        massage_time = moscow_tz.localize(massage_time)
    delete_booking_task.apply_async(
        args=[event_id],
        eta=massage_time
    )
    return {"success": True, "eventId": event_id}

@app.post("/api/cancel")
async def cancel(request: BookingRequest = Body(...)):
    # eventId —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞
    event_id = getattr(request, 'eventId', None) or (request.dict().get('eventId'))
    success = cancel_slot(event_id, request.name, request.slot, request.massageType)
    if not success:
        raise HTTPException(status_code=404, detail="–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    return {"success": True}

@app.get("/api/records")
async def get_records():
    return get_all_bookings()

@app.get("/api/user-bookings/{user_name}")
async def get_user_records(user_name: str):
    return get_user_bookings(user_name)

app.mount("/", StaticFiles(directory="static", html=True), name="static")

@app.get("/")
async def serve_index():
    return FileResponse("dist/index.html")
