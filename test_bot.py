#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Telegram –±–æ—Ç–∞ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
Massage Master Bot v2.0
"""

import asyncio
import os
import json
from datetime import datetime, timedelta
from aiogram import Bot

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = os.getenv("VITE_ADMIN_ID")
CALENDAR_ID = os.getenv("CALENDAR_ID")

# –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
class Colors:
    GREEN = '\033[92m'
    RED = '\033[91m'
    YELLOW = '\033[93m'
    BLUE = '\033[94m'
    PURPLE = '\033[95m'
    CYAN = '\033[96m'
    RESET = '\033[0m'
    BOLD = '\033[1m'

def print_status(message, status="info"):
    """–ü–µ—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ü–≤–µ—Ç–∞–º–∏"""
    colors = {
        "success": Colors.GREEN + "‚úÖ ",
        "error": Colors.RED + "‚ùå ", 
        "warning": Colors.YELLOW + "‚ö†Ô∏è ",
        "info": Colors.BLUE + "‚ÑπÔ∏è ",
        "test": Colors.PURPLE + "üß™ "
    }
    
    print(f"{colors.get(status, '')}{message}{Colors.RESET}")

def check_environment():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print_status("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...", "test")
    
    variables = {
        "BOT_TOKEN": BOT_TOKEN,
        "ADMIN_ID": ADMIN_ID, 
        "CALENDAR_ID": CALENDAR_ID,
        "GOOGLE_APPLICATION_CREDENTIALS": os.getenv("GOOGLE_APPLICATION_CREDENTIALS")
    }
    
    all_good = True
    for name, value in variables.items():
        if value:
            print_status(f"{name}: {'*' * 10} (—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞)", "success")
        else:
            print_status(f"{name}: –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–ê", "error")
            all_good = False
    
    return all_good

async def test_bot_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–æ—Ç—É"""
    print_status("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–æ—Ç—É...", "test")
    
    if not BOT_TOKEN:
        print_status("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", "error")
        return False
    
    try:
        bot = Bot(token=BOT_TOKEN)
        bot_info = await bot.get_me()
        print_status(f"–ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: @{bot_info.username} ({bot_info.first_name})", "success")
        await bot.session.close()
        return True
    except Exception as e:
        print_status(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–æ—Ç—É: {e}", "error")
        return False

async def test_admin_notification():
    """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
    print_status("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω—É...", "test")
    
    if not BOT_TOKEN or not ADMIN_ID:
        print_status("BOT_TOKEN –∏–ª–∏ ADMIN_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã", "error")
        return False
    
    try:
        bot = Bot(token=BOT_TOKEN)
        
        test_message = f"""
üîî **–¢–ï–°–¢–û–í–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï**

–í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}
–î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y')}

‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!

ü§ñ Massage Master Bot v2.0
        """
        
        await bot.send_message(
            chat_id=ADMIN_ID,
            text=test_message,
            parse_mode='Markdown'
        )
        
        print_status("–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ", "success")
        await bot.session.close()
        return True
        
    except Exception as e:
        print_status(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}", "error")
        return False

def test_google_calendar():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Calendar"""
    print_status("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Google Calendar API...", "test")
    
    try:
        from calendar_utils import get_calendar_service
        
        service = get_calendar_service()
        calendars = service.calendarList().list().execute()
        
        print_status(f"Google Calendar API —Ä–∞–±–æ—Ç–∞–µ—Ç. –ö–∞–ª–µ–Ω–¥–∞—Ä–µ–π: {len(calendars['items'])}", "success")
        
        # –ü–æ–∏—Å–∫ –Ω–∞—à–µ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        for calendar in calendars['items']:
            if calendar['id'] == CALENDAR_ID:
                print_status(f"–¶–µ–ª–µ–≤–æ–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞–π–¥–µ–Ω: {calendar.get('summary', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}", "success")
                return True
        
        print_status("–¶–µ–ª–µ–≤–æ–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–µ –Ω–∞–π–¥–µ–Ω", "warning")
        return True  # API —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–µ –Ω–∞–π–¥–µ–Ω
        
    except ImportError:
        print_status("–ú–æ–¥—É–ª—å calendar_utils –Ω–µ –Ω–∞–π–¥–µ–Ω", "error")
        return False
    except Exception as e:
        print_status(f"–û—à–∏–±–∫–∞ Google Calendar API: {e}", "error")
        return False

def test_event_creation():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ"""
    print_status("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è...", "test")
    
    try:
        from calendar_utils import create_event
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ —á–µ—Ä–µ–∑ —á–∞—Å
        test_time = datetime.now() + timedelta(hours=1)
        end_time = test_time + timedelta(minutes=60)
        
        event_link = create_event(
            name="–¢–ï–°–¢ - –£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏",
            start_time=test_time,
            end_time=end_time,
            massage_type="–¢–µ—Å—Ç–æ–≤—ã–π –º–∞—Å—Å–∞–∂",
            description="–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ. –ú–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å."
        )
        
        print_status(f"–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ: {event_link}", "success")
        return True
        
    except ImportError:
        print_status("–ú–æ–¥—É–ª—å calendar_utils –Ω–µ –Ω–∞–π–¥–µ–Ω", "error")
        return False
    except Exception as e:
        print_status(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è: {e}", "error")
        return False

def test_webapp_data_format():
    """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç WebApp"""
    print_status("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö WebApp...", "test")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    test_data = {
        "slot": "2025-01-15T14:00:00.000Z",
        "name": "–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
        "massageType": "fullbody",
        "massageName": "–ú–∞—Å—Å–∞–∂ –≤—Å–µ–≥–æ —Ç–µ–ª–∞",
        "price": "4000 ‚ÇΩ"
    }
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–µ—Ä–∏–∞–ª–∏–∑—É—é—Ç—Å—è
        json_data = json.dumps(test_data)
        parsed_data = json.loads(json_data)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
        selected_time = datetime.fromisoformat(parsed_data['slot'])
        
        print_status("–§–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö WebApp –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω", "success")
        print_status(f"–ü—Ä–∏–º–µ—Ä: {parsed_data['name']} - {parsed_data['massageName']} –Ω–∞ {selected_time.strftime('%d.%m.%Y %H:%M')}", "info")
        return True
        
    except Exception as e:
        print_status(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö: {e}", "error")
        return False

async def run_all_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print(f"\n{Colors.BOLD}{Colors.CYAN}üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï MASSAGE MASTER BOT v2.0{Colors.RESET}")
    print("=" * 50)
    
    tests = [
        ("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è", check_environment),
        ("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–æ—Ç—É", test_bot_connection),
        ("Google Calendar API", test_google_calendar),
        ("–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è", test_event_creation),
        ("–§–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö WebApp", test_webapp_data_format),
        ("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É", test_admin_notification),
    ]
    
    results = []
    
    for test_name, test_func in tests:
        print(f"\n{Colors.CYAN}üìã {test_name}:{Colors.RESET}")
        
        if asyncio.iscoroutinefunction(test_func):
            result = await test_func()
        else:
            result = test_func()
            
        results.append((test_name, result))
    
    # –ò—Ç–æ–≥–∏
    print(f"\n{Colors.BOLD}üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:{Colors.RESET}")
    print("=" * 50)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–®–ï–õ" if result else "‚ùå –ù–ï –ü–†–û–®–ï–õ"
        color = Colors.GREEN if result else Colors.RED
        print(f"{color}{status}{Colors.RESET} - {test_name}")
        if result:
            passed += 1
    
    print(f"\n{Colors.BOLD}–†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏{Colors.RESET}")
    
    if passed == total:
        print_status("–í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ. üéâ", "success")
    else:
        print_status("–ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.", "warning")
        print_status("–°–º–æ—Ç—Ä–∏—Ç–µ TROUBLESHOOTING_NOTIFICATIONS.md –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º", "info")

if __name__ == "__main__":
    try:
        asyncio.run(run_all_tests())
    except KeyboardInterrupt:
        print_status("\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º", "warning")
    except Exception as e:
        print_status(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", "error") 